##################################################
##  Script to get sequence (which can be SNP masked)    
##  around SNV or indels to check primers already made for   		
##	 Targeted resequencing on the MiSeq 				
##  Aparicio Lab WSOP 2013-001 developed by			
##	 Dr Damian Yap , Research Associate				
##	 dyap@bccrc.ca  Version 2.0 (Jul 2013) 			
##################################################


# These commands must be specifed in order for this script to work
# source("http://www.bioconductor.org/biocLite.R"); source("http://www.bioconductor.org/biocLite.R"); biocLite("BSgenome"); biocLite("BSgenome.Hsapiens.UCSC.hg19"); library('BSgenome.Hsapiens.UCSC.hg19')
# install.packages("XLConnect")

library(Biostrings)
library("IRanges")
library("GenomicRanges")
library(Rsamtools)
library('BSgenome.Hsapiens.UCSC.hg19')
library(XLConnect)

# Load the latest available dnSNP for the version of bioconductor if not installed 
len <-  length(available.SNPs())
dbSNP <- available.SNPs()[len]
print("Latest SNP database")
dbSNP

SNP <-   installed.SNPs()
print("Installed SNP database")
dbSNP

# Inject the SNPs into the hg19 ref
SNP_Hsapiens <- injectSNPs(Hsapiens, dbSNP)

#################################################
# Directory structure and file names

basedir="/share/lustre/backup/dyap/Projects"
project="Tumour_Evol"
sample="SA494"

workdir=paste(basedir,project, sep="/")

manfile=paste(sample,"sc.AmpliconManifest",sep="")

######################################################
# Input #2 which is the AmpliconManfest file
# set input directory
indir=paste(workdir,sample,sep="/")
infile2=paste(indir, manfile, sep="/")

# Input #1 is the primer excel sheet
setwd(indir)
pat=paste(paste(sample,"Primers", sep="_"),"*.*plates.xls", sep="_")
file_name = list.files(pattern = pat)
file = paste(indir,file_name, sep="/")

# workbook <- system.file(file, package = "XLConnect")
# Load workbook
wb <- loadWorkbook(file, create = FALSE)
# Query available worksheets
sheets <- getSheets(wb)

# This command reads all the sheets in a workbook into a data_list
primers <- readWorksheet(wb, sheets)

# Output file
outfile=paste(paste(workdir,sample,sep="/"), "SNP_Checked_all.csv", sep="/")

manifest=as.data.frame(read.table(infile2, header=TRUE, skip=5, sep="\t", stringsAsFactors = FALSE))

primerlist <- data.frame(ID = rep("", nrow(primers)),
                     Lpriseq = rep("None", nrow(primers)),
                     Rpriseqr = rep("None", nrow(primers)),
                     stringsAsFactors = FALSE)
                     
for (rj in seq(nrow(primers))) {

		chr <- primers$Chr[rj]
		pos <- primers$Posn[rj]
		left <- primers$F_primer[rj]
		right <- primers$R_primer[rj]

		id <- paste(chr,pos, sep="_")
		# Removal of adaptors (Fluidigm)
		leftadapt="ACACTGACGACATGGTTCTACA"
		# (5'->3' of reverse adaptor)
		rightadapt="TACGGTAGCAGAGACTTGGTCT"

		# removal of the adaptor sequences from ordered primers
		lpriseq <- gsub("ACACTGACGACATGGTTCTACA", "", left)
		rpriseq <- gsub("TACGGTAGCAGAGACTTGGTCT", "", right)
		
		# Reverse Complement the Right primer without adaptor
		x <- DNAString(rpriseq)
		rpriseqr <- as.character(reverseComplement(x))
		
		primerlist$ID[rj] <- id
		primerlist$Lpriseq[rj] <- lpriseq
		primerlist$Rpriseqr[rj] <- rpriseqr


			}
			
			
outdf <- data.frame(ID = rep("", nrow(manifest)),
                     Clus = rep("", nrow(manifest)),
                     AmpSNP = rep("", nrow(manifest)),
                     LpriSNP = rep("", nrow(manifest)),
                     RpriSNP = rep("", nrow(manifest)),
                     Lpriseq = rep("None", nrow(manifest)),
                     Rpriseq = rep("None", nrow(manifest)),
                     Ampliseq = rep("None", nrow(manifest)),
                     SNPLpriseq = rep("NA", nrow(manifest)),
                     SNPRpriseq = rep("NA", nrow(manifest)),
                     SNPAmpliseq = rep("NA", nrow(manifest)),                      
                     stringsAsFactors = FALSE)

for (ri in seq(nrow(indf))) {
  
	        	id <- manifest$Name[ri]
    			chr <- manifest$Chromosome[ri]
  			start <-  as.numeric(manifest$Amplicon.Start[ri])+1
			end <-  as.numeric(manifest$Amplicon.End[ri])+1
			leftlen <-  as.numeric(manifest$Upstream.Probe.Length[ri])
			rgtlen <-  as.numeric(manifest$Downstream.Probe.Length[ri])

# Get the amplicons 1. Reference and 2. SNPmasked
 						ampliseq <- as.character(getSeq(Hsapiens,chr,start,end))
 						snpampliseq <- as.character(getSeq(SNP_Hsapiens,chr,start,end))
 
# Get left and right primers 1. Ref 2. SNPmasked 
						leftend <- start + leftlen
						lpriseq <- as.character(getSeq(Hsapiens,chr,start,leftend))
						snplpriseq <- as.character(getSeq(SNP_Hsapiens,chr,start,leftend))

						rightstart <- end - rgtlen
						rpriseq <- as.character(getSeq(Hsapiens,chr,rightstart,end))
						snprpriseq <- as.character(getSeq(SNP_Hsapiens,chr,rightstart,end))

						# Testing to see if the sequence are identical, if they are they do not contain SNPs

									if (ampliseq == snpampliseq) ampsnp <- "ok" else { ampsnp <- "SNP" }
									if (lpriseq == snplpriseq) lprisnp <- "ok" else { lprisnp <- "SNP" }
									if (rpriseq == snprpriseq) rprisnp <- "ok" else { rprisnp <- "SNP" }


# writing the output to the dataframe 
			outdf$ID[ri] <- id
                     	outdf$Clus[ri] <- clus
                     	outdf$AmpSNP[ri] <- ampsnp
                     	outdf$LpriSNP[ri] <- lprisnp
                     	outdf$RpriSNP[ri] <- rprisnp
                     	outdf$Lpriseq[ri] <- lpriseq
                     	outdf$Rpriseq[ri] <- rpriseq
                     	outdf$Ampliseq[ri] <- ampliseq
                     	outdf$SNPLpriseq[ri] <- snplpriseq
                     	outdf$SNPRpriseq[ri] <- snprpriseq
                     	outdf$SNPAmpliseq[ri] <- snpampliseq

						
  }
  
# output file
write.csv(outdf, file = outfile)
